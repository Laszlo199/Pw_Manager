@page "/"
@using Pw_Frontend.Dtos.ManagerDto
@using Pw_Frontend.Application.Services
@inject IHttpService HttpService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

@if (Passwords == null)
{
    <h3>Loading...</h3>
}
else if(Passwords.Count == 0)
{
    <h3>You have no passwords</h3>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Site</th>
            <th>Username</th>
            <th>Password</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var password in Passwords)
        {
            <tr>
                <td>@password.WebsiteName</td>
                <td>@password.Email</td>
                <td>@password.Password</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-secondary" @onclick="() => ShowPassord(password.Id)">Show password</button>
                        <button class="btn btn-primary" @onclick="() => UpdatePassord(password.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeletePassword(password.Id)">Delete</button>
                    </div>
                </td>
            </tr>
        }
        
        </tbody>
    </table>
}

@code {
    public List<GetAllByUserIdDto>? Passwords { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var token = AuthenticationService.TokenDto;
        if (token is null)
        {
            return;
        }
        var passwords = await HttpService.Get<List<GetAllByUserIdDto>>($"api/Manager/GetAllByUserId/{token?.UserId}");
        if (passwords is not null)
        {
            Passwords = passwords;
        }
        await base.OnInitializedAsync();
    }

    private async Task ShowPassord(int pswdId)
    {
        NavigationManager.NavigateTo($"/Details/{pswdId}");
    }
    private async Task UpdatePassord(int pswdId)
    {
        NavigationManager.NavigateTo($"/Update/{pswdId}");
    }

    private async Task DeletePassword(int psswdId)
    {
        await HttpService.Delete($"/Api/Manager/DeletePassword/{psswdId}");
        await OnInitializedAsync();
    }

}