@page "/Create"
@using Pw_Frontend.Application.Services
@using Pw_Frontend.Dtos.ManagerDto
@using Pw_Frontend.Application.Dtos
@using PW_Frontend.Service
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IHttpService HttpService
@inject CryptoInteropService CryptoInteropService

<div class="container card shadow rounded p-3 col-md-4">
    <h3>Create new password</h3>
    <EditForm Model="CreateNewPasswordDto">
        <div class="form-floating">
            <input type="text" class="form-control" @bind="CreateNewPasswordDto.WebsiteName"/>
            <label>Website:</label>
        </div>
        <div class="form-floating">
            <input type="email" class="form-control" @bind="CreateNewPasswordDto.Email"/>
            <label>Email:</label>
        </div>
        <button class="btn btn-secondary w-100" @onclick="() => GenerateStrongPassword()">Generate strong password</button>
        <div class="form-floating">
            <input type="password" class="form-control" @bind="CreateNewPasswordDto.Password"/>
            <label>Password:</label>
        </div>
        <div class="btn-group w-100 mt-3">
            <button class="btn btn-primary" type="submit" @onclick="Save">Save password</button>
        </div>
    </EditForm>
</div>

@code {
    public CreateNewPasswordDto CreateNewPasswordDto { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        var userId = AuthenticationService.TokenDto?.UserId;
        byte[]? masterKey = AuthenticationService.MasterKey;
        if (userId is null || masterKey is null)
        {
            NavigationManager.NavigateTo("/Login");
        }
        CreateNewPasswordDto.UserId = AuthenticationService.TokenDto!.UserId;
        await base.OnInitializedAsync();
    }

    private async Task Save() {
        var newPassDto = CreateNewPasswordDto;
        byte[]? masterKey = AuthenticationService.MasterKey;
        newPassDto.Password = await CryptoInteropService.DecryptData(newPassDto.Password, masterKey);
        await HttpService.Post("api/Manager/CreateNewPassword", CreateNewPasswordDto);
        NavigationManager.NavigateTo("/");
    }

    private async Task GenerateStrongPassword(int length = 16)
    {
        var password = await HttpService.Get<string>($"api/Manager/GenerateRandomPassword/{length}");
        if (password == null)
        {
            return;
        }
        CreateNewPasswordDto.Password = password;
    }
}